name: Build Telegram Android

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
          - info
          - debug
      tags:
        description: 'Tags to run'
        required: false
        type: boolean
        default: false
      abi:
        description: 'Target ABI'
        required: true
        type: choice
        options:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 增加构建超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install Android SDK and NDK
        uses: android-actions/setup-android@v2
        with:
          sdkVersion: '30.0.3'
          ndkVersion: '20.1.5948950'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # ----------------- 清理力度加强 -----------------
      - name: Stop Gradle Daemon
        run: ./gradlew --stop # 尝试先停止 Gradle 守护进程

      - name: Clean Gradle cache (Aggressive)
        run: |
          rm -rf ~/.gradle/caches/
          rm -rf ~/.gradle/daemon/
          rm -rf ~/.gradle/wrapper/
          rm -rf TMessagesProj_App/.gradle #  清理app目录中的.gradle
          find . -name "build" -type d -exec rm -rf {} +  # 删除所有 build 目录
          df -h #  构建前后检查磁盘空间
      - name: Check disk space (Before Build)
        run: df -h

      # ----------------- 构建时减少中间文件 -----------------
        #    尝试关闭一些没必要的任务
      - name: Build APK
        run: |
          ./gradlew assembleRelease -Porg.gradle.configureondemand=false -PabiFilters=${{ github.event.inputs.abi }} --info --stacktrace
          echo "Build completed, checking output..."

      - name: Verify APK exists
        run: |
          echo "正在检查 APK 输出目录..."
          echo "检查所有可能的 APK 位置..."
          find . -name "*.apk" -type f
          echo ""
          echo "检查 afat flavor 的 APK（这是主要的 release 版本）..."
          if [ -f "TMessagesProj_App/build/outputs/apk/afat/release/app.apk" ]; then
            echo "✅ 成功找到 APK 文件 (afat flavor)"
            ls -lh "TMessagesProj_App/build/outputs/apk/afat/release/app.apk"
          else
            echo "❌ 错误：找不到 afat flavor 的 APK 文件！"
            echo "当前目录结构："
            find . -name "build" -type d
            echo "构建目录内容："
            find . -name "build" -type d -exec ls -la {} \;
            exit 1
          fi

      - name: Check disk space (After Build)
        run: df -h

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: TMessagesProj_App/build/outputs/apk/afat/release
          signingKeyBase64: ${{ secrets.RELEASE_KEYSTORE }}
          alias: ${{ secrets.RELEASE_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.RELEASE_STORE_PASSWORD }}
          keyPassword: ${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: telegram-android
          path: TMessagesProj_App/build/outputs/apk/afat/release/app.apk
